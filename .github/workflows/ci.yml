name: CI Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]

env:
  NODE_VERSION: '18'

jobs:
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16, 18, 20]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install backend dependencies
        run: |
          cd backend
          npm ci
      
      - name: Run backend tests
        run: |
          cd backend
          npm test
      
      - name: Run backend linting
        run: |
          cd backend
          npm run lint
      
      - name: Check backend security vulnerabilities
        run: |
          cd backend
          npm audit --audit-level=moderate || true
      
      - name: Upload backend test coverage
        uses: codecov/codecov-action@v3
        with:
          file: backend/coverage/lcov.info
          flags: backend
          name: backend-coverage
        if: matrix.node-version == '18'
  
  frontend-build:
    name: Frontend Build & Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16, 18, 20]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Run frontend tests
        run: |
          cd frontend
          npm test
      
      - name: Run frontend linting
        run: |
          cd frontend
          npm run lint
      
      - name: Build frontend
        run: |
          cd frontend
          npm run build
      
      - name: Check frontend security vulnerabilities
        run: |
          cd frontend
          npm audit --audit-level=moderate || true
      
      - name: Upload frontend test coverage
        uses: codecov/codecov-action@v3
        with:
          file: frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
        if: matrix.node-version == '18'
      
      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build-${{ matrix.node-version }}
          path: frontend/dist
          retention-days: 7
        if: matrix.node-version == '18'
  
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-build]
    
    services:
      # Optional: Add any required services for integration tests
      # redis:
      #   image: redis
      #   options: >-
      #     --health-cmd "redis-cli ping"
      #     --health-interval 10s
      #     --health-timeout 5s
      #     --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci
          cd ../frontend && npm ci
      
      - name: Start backend server
        run: |
          cd backend
          npm start &
          sleep 10
      
      - name: Run integration tests
        run: |
          # Basic integration test - check if backend is responding
          curl -f http://localhost:3001/health || exit 1
          
          # Optional: Add more comprehensive integration tests
          echo "Integration tests completed"
      
      - name: Integration test summary
        if: always()
        run: |
          echo "## Integration Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend Health**: ✅" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend Build**: ✅" >> $GITHUB_STEP_SUMMARY
          echo "- **Integration**: ✅" >> $GITHUB_STEP_SUMMARY
  
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci
          cd ../frontend && npm ci
      
      - name: Run Prettier check
        run: |
          npm run format:check
          cd backend && npm run format:check
          cd ../frontend && npm run format:check
      
      - name: Run ESLint
        run: |
          npm run lint
          cd backend && npm run lint
          cd ../frontend && npm run lint
      
      - name: Check for TODO comments
        run: |
          echo "Checking for TODO comments..."
          find . -name "*.js" -o -name "*.ts" -o -name "*.jsx" -o -name "*.tsx" | xargs grep -l "TODO" || echo "No TODO comments found"
      
      - name: Check for console.log statements
        run: |
          echo "Checking for console.log statements..."
          find . -name "*.js" -o -name "*.ts" -o -name "*.jsx" -o -name "*.tsx" | xargs grep -l "console\.log" || echo "No console.log statements found"
  
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci
          cd ../frontend && npm ci
      
      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate || true
          cd backend && npm audit --audit-level=moderate || true
          cd ../frontend && npm audit --audit-level=moderate || true
      
      - name: Check for known vulnerabilities
        run: |
          echo "Security scan completed"
          echo "Check the audit output above for any security issues"
  
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-build, integration-test, code-quality, security-scan]
    if: always()
    
    steps:
      - name: Generate CI summary
        run: |
          echo "## CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend Tests**: ${{ needs.backend-test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend Build**: ${{ needs.frontend-build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Integration Tests**: ${{ needs.integration-test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Quality Checks" >> $GITHUB_STEP_SUMMARY
          echo "- **Code Quality**: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Scan**: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.backend-test.result }}" == "success" && "${{ needs.frontend-build.result }}" == "success" && "${{ needs.integration-test.result }}" == "success" && "${{ needs.code-quality.result }}" == "success" && "${{ needs.security-scan.result }}" == "success" ]]; then
            echo "✅ **Overall Status**: All checks passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Overall Status**: Some checks failed" >> $GITHUB_STEP_SUMMARY
          fi 